03/29 notes: 

representation of floating point numbers 
floating <—> fixed

31.22  x 10^(-1)
= 3.122 x 10^(0)
= 0.3122 x 10^(1)

in binary world, we can see something like this: 1.0010001011 × 2^(23)

other examples, (scientific notation): 

mass of earth: 5.972 × 10^(24)
mass of electron: 9.1093837015(28) × 10^(-31)


a number contains three parts:
1. sign 
2. exponent 
3. significance / digits / mantissa 

can be 1 bit, 8 bit, 23 bit for a 32 bit


sign: negative: 1
         postive: 0

exponent: + 127 —> to 8-bit binary

example: 
-31 + 127 = 96 —> 01100000
127-biased
IEEE754: tech document (standard)
		technical law

all numbers that can be represented by IEEE754 (< 4B) are not evenly distributed 

smallest positive IEE754 number: 2^(-150)

silly loop:

float f = 1f;
while(f>0){
 
f/= 2;
System.out.println(f);

}

important notes: 
- IEEE754 double precision
- underflow!

dollar simulation:
float sales = 17000000f;
for (int k = 0; k < 1000; k++){
	sales = sales + 1;
System.out.println(“sales = ” + sales);

}

because IEEE754 single precision con not distinguish 17000000 and 17000001. These two numbers have the same bit pattern!
